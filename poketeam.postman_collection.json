{
	"info": {
		"_postman_id": "ca9afda5-d288-4e16-8b71-4115cb754354",
		"name": "poketeam",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40110895"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Data object has the correct structure\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Uid is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data.uid).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Uname, fname, lname, and email are non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.uname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    pm.expect(responseData.data.fname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    pm.expect(responseData.data.lname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    pm.expect(responseData.data.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{loginData}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/auth/login",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign Up",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.data.msg).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Msg field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.msg).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{signUpData}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/auth/signup",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate data field in the response schema\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData).to.have.property('data');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{HOST}}/auth/delete/{{id}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth",
								"delete",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Data field is present and not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;",
									"});",
									"var template = `",
									"<style type=\"text/css\">",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
									"    .tftable tr {background-color:#ffffff;}",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
									"    .tftable tr:hover {background-color:#e0ffff;}",
									"</style>",
									"",
									"<table class=\"tftable\" border=\"1\">",
									"    <tr>",
									"        <th>Data</th>",
									"    </tr>",
									"    <tr>",
									"        <td>{{response.data}}</td>",
									"    </tr>",
									"</table>",
									"`;",
									"",
									"function constructVisualizerPayload() {",
									"    return {response: pm.response.json()}",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/auth/logout",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Team",
					"item": [
						{
							"name": "Team Pokemon",
							"item": [
								{
									"name": "Update Team Pokemon",
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tid\": {{tid}},\n    \"pokemon\": [\n        \n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST}}/user/team/pokemon-update",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"user",
												"team",
												"pokemon-update"
											]
										}
									},
									"response": []
								},
								{
									"name": "All Team Pokemon",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST}}/user/team/pokemon-id/{{tid}}",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"user",
												"team",
												"pokemon-id",
												"{{tid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add Team Pokemon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"    pm.expect(responseData.data.msg).to.exist.and.to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"Data object should exist and be an object\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"});",
													"",
													"",
													"pm.test(\"Verify that the 'msg' field is present and is a non-empty string\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData).to.be.an('object');",
													"  pm.expect(responseData.data.msg).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
													"});",
													"",
													"",
													"pm.test(\"Content type is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tid\": 1,\n    \"pokemon\": [\n        {\n            \"pid\": 384,\n            \"nickname\": \"Rayquaza\",\n            \"level\": 10,\n            \"is_shiny\": 0\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST}}/user/team/pokemon-add",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"user",
												"team",
												"pokemon-add"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Team Pokemon",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tid\": {{tid}},\n    \"pid\": {{pid}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST}}/user/team/pokemon-delete",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"user",
												"team",
												"pokemon-delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Many Team Pokemon",
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tid\": {{tid}},\n    \"pids\": [\n        384,\n        144\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST}}/user/team/pokemon-delete-many",
											"host": [
												"{{HOST}}"
											],
											"path": [
												"user",
												"team",
												"pokemon-delete-many"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"Data is in a valid JSON format\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/user/team/info",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"team",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Extracting the id from the response body",
											"pm.test(\"Save the returned id to a variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"createdTeamId\", jsonData.data.id);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{id}},\n    \"name\": \"{{teamName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/user/team/create",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"team",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"",
											"pm.test(\"Data object, msg string, and id string are present in the response schema\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.data.msg).to.be.a('string');",
											"    pm.expect(responseData.data.id).to.be.a('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": {{createdTeamId}},\n    \"name\": {{updateTeamName}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/user/team/update",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"team",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/user/team/delete/{{id}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"team",
										"delete",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "All User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required Content-Type header with value application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Data array is present in the response\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.exist.and.to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Data array should be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.data).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Verify the request URL includes the expected parameters\", function () {",
											"    pm.expect(pm.request.url).to.include(\"localhost:8000/user/team/all/12\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/user/team/all/{{uid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"team",
										"all",
										"{{uid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pokemon",
					"item": [
						{
							"name": "Info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type is application/json\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Response has the required field 'data'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('data');",
											"});",
											"",
											"",
											"pm.test(\"Data field should not be empty\", function () {",
											"  const responseData = pm.response.json();",
											"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;",
											"});",
											"",
											"",
											"pm.test(\"Data field should be a string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.a('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/user/pokemon/info",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"pokemon",
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Response has the required Content-Type header with value 'application/json'\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Data array is present and is empty\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.exist.and.to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"pm.test(\"Response time is within acceptable range\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(300);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{pokemonName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/user/pokemon/search",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"pokemon",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get By Id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/user/pokemon/id/{{pid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"pokemon",
										"id",
										"{{pid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Stats",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/user/pokemon/stats/{{pid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"pokemon",
										"stats",
										"{{pid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Moves",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/user/pokemon/moves/{{pid}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"user",
										"pokemon",
										"moves",
										"{{pid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Data field should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/user/ping",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"user",
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/admin/users/all",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"users",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Teams",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/admin/teams/all",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"teams",
								"all"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "createdTeamId",
			"value": ""
		},
		{
			"key": "uid",
			"value": "",
			"type": "default"
		}
	]
}